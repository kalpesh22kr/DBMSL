db.createCollection("Employee")

db.Employee.insert([
    {
        "Name": { "FName": "John", "LName": "Doe" },
        "Company_Name": "Infosys",
        "Salary": 40000,
        "Designation": "Programmer",
        "Age": 28,
        "Expertise": ["Java", "Python", "SQL"],
        "DOB": "1995-01-15",
        "Email_id": "john.doe@example.com",
        "Contact": "9876543210",
        "Address": [{ "PAddr": "123 Main St", "LAddr": "Apt 45" }]
    },
    {
        "Name": { "FName": "Alice", "LName": "Smith" },
        "Company_Name": "TCS",
        "Salary": 35000,
        "Designation": "Tester",
        "Age": 25,
        "Expertise": ["Testing", "Automation"],
        "DOB": "1998-05-22",
        "Email_id": "alice.smith@example.com",
        "Contact": "8765432109",
        "Address": [{ "PAddr": "456 Oak St", "LAddr": "Suite 12" }]
    },
    {
        "Name": { "FName": "Bob", "LName": "Johnson" },
        "Company_Name": "Infosys",
        "Salary": 32000,
        "Designation": "Programmer",
        "Age": 30,
        "Expertise": ["C++", "JavaScript", "Node.js"],
        "DOB": "1992-08-10",
        "Email_id": "bob.johnson@example.com",
        "Contact": "7654321098",
        "Address": [{ "PAddr": "789 Pine St", "LAddr": "Apt 8" }]
    },
    {
        "Name": { "FName": "Eva", "LName": "White" },
        "Company_Name": "TCS",
        "Salary": 28000,
        "Designation": "Tester",
        "Age": 26,
        "Expertise": ["Manual Testing", "Selenium"],
        "DOB": "1997-03-18",
        "Email_id": "eva.white@example.com",
        "Contact": "6543210987",
        "Address": [{ "PAddr": "101 Cedar St", "LAddr": "Unit 20" }]
    },
    {
        "Name": { "FName": "Charlie", "LName": "Brown" },
        "Company_Name": "Wipro",
        "Salary": 42000,
        "Designation": "Programmer",
        "Age": 32,
        "Expertise": ["Python", "Django", "MongoDB"],
        "DOB": "1990-12-05",
        "Email_id": "charlie.brown@example.com",
        "Contact": "5432109876",
        "Address": [{ "PAddr": "222 Maple St", "LAddr": "Floor 3" }]
    }
]);



1. Select all documents where the Designation field has the value
"Programmer" and the value of the salary field is greater than
30000.
--> db.Employee.find({ "Designation": "Programmer", "Salary": { $gt: 30000 } })

2: Create a new document if no document in the "Employee" collection contains {Designation: "Tester", Company_name: "TCS", Age: 25}
-->db.Employee.updateOne(
    { "Designation": "Tester", "Company_Name": "TCS", "Age": 25 },
    { $setOnInsert: { "Designation": "Tester", "Company_Name": "TCS", "Age": 25 } },
    { upsert: true }
)

3: Increase salary of each Employee working with â€œInfosys" by 10000
-->db.Employee.updateMany(
    { "Company_Name": "Infosys" },
    { $inc: { "Salary": 10000 } }
)

4: Find all employees working with "TCS" and reduce their salary by 5000
-->db.Employee.updateMany(
    { "Company_Name": "TCS" },
    { $inc: { "Salary": -5000 } }
)


5: Return documents where Designation is not equal to "Tester"
-->db.Employee.find({ "Designation": { $ne: "Tester" } })


 6: Find all employees with an Exact Match on an Array having Expertise: ['Mongodb','Mysql','Cassandra']
-->db.Employee.find({ "Expertise": { $all: ['Mongodb', 'Mysql', 'Cassandra'] } })







 1: Final name of Employee where age is less than 30 and salary more than 50000.
    -->db.Employee.findOne({ "Age": { $lt: 30 }, "Salary": { $gt: 50000 } }, { "Name": 1 })


 2: Creates a new document if no document in the employee collection contains {Designation: "Tester", Company_name: "TCS", Age: 25}.
    -->db.Employee.updateOne(
        { "Designation": "Tester", "Company_Name": "TCS", "Age": 25 },
        { $setOnInsert: { "Designation": "Tester", "Company_Name": "TCS", "Age": 25 } },
        { upsert: true }
        )


 3: Selects all documents in the collection where the field age has a value less than 30 or the value of the salary field is greater than 40000.
    -->db.Employee.find({ $or: [{ "Age": { $lt: 30 } }, { "Salary": { $gt: 40000 } }] })


 4: Find documents where Designation is not equal to "Developer".
    -->db.Employee.find({ "Designation": { $ne: "Developer" } })


 5: Find _id, Designation, Address and Name from all documents where Company_name is "Infosys".
    -->db.Employee.find({ "Company_Name": "Infosys" }, { "_id": 1, "Designation": 1, "Address": 1, "Name": 1 })


 6: Display only FName and LName of all Employees.
    -->db.Employee.find({}, { "Name.FName": 1, "Name.LName": 1 })




